! Main solver routines for heat equation solver
module core_cuda
  use cudafor
  use heat

contains


  ! Compute one time step of temperature evolution
  ! Arguments:
  !   curr (type(field)): current temperature values
  !   prev (type(field)): values from previous time step
  !   a (real(dp)): update equation constant
  !   dt (real(dp)): time step value
  attributes(global) subroutine evolve_kernel(curr, prev, a, dt, dx2, dy2, nx, ny)

    implicit none

    real(dp), dimension(0:nx+1,0:ny+1), intent(inout) :: curr, prev
    real(dp), value, intent(in) :: a, dt, dx2, dy2
    integer, value, intent(in) :: nx, ny

    integer :: i, j

    i = (blockIdx%x - 1) * blockDim%x + threadIdx%x
    j = (blockIdx%y - 1) * blockDim%y + threadIdx%y

    if (i > 0 .and. i <= nx .and. j > 0 .and. j <= ny) then
          curr(i, j) = prev(i, j) + a * dt * &
               & ((prev(i-1, j) - 2.0 * prev(i, j) + &
               &   prev(i+1, j)) / dx2 + &
               &  (prev(i, j-1) - 2.0 * prev(i, j) + &
               &   prev(i, j+1)) / dy2)
    end if
  end subroutine evolve_kernel

  subroutine evolve(curr, prev, a, dt)

    implicit none

    type(field), intent(inout) :: curr, prev
    real(dp) :: a, dt

    real(dp) :: dx2, dy2
    integer :: nx, ny
    integer, parameter :: blocksize = 16
    type(dim3) :: dimBlock, dimGrid
    integer :: istat


    nx = curr%nx
    ny = curr%ny
    dx2 = curr%dx**2
    dy2 = curr%dy**2

    dimBlock = dim3(blocksize, blocksize, 1)
    dimGrid = dim3((nx + 2 + blocksize - 1) / blocksize,  &
                 (ny + 2 + blocksize - 1) / blocksize, 1)  
    call evolve_kernel<<<dimGrid, dimBlock>>>(curr%devdata, prev%devdata, a, dt, dx2, dy2, nx, ny)

    istat = cudaDeviceSynchronize()

  end subroutine evolve

  ! Swap the data fields of two variables of type field
  ! Arguments:
  !   curr, prev (type(field)): the two variables that are swapped
  subroutine swap_fields(curr, prev)

    implicit none

    type(field), intent(inout) :: curr, prev
    real(dp), allocatable, dimension(:,:) :: tmp
    real(dp), device, allocatable, dimension(:,:) :: tmpdev

    call move_alloc(curr%data, tmp)
    call move_alloc(prev%data, curr%data)
    call move_alloc(tmp, prev%data)

    call move_alloc(curr%devdata, tmpdev)
    call move_alloc(prev%devdata, curr%devdata)
    call move_alloc(tmpdev, prev%devdata)
  end subroutine swap_fields
  

  subroutine enter_data(temperature1, temperature2)
    implicit none

    type(field) :: temperature1, temperature2

   allocate(temperature1%devdata(0:temperature1%nx+1, 0:temperature1%ny+1))
   allocate(temperature2%devdata(0:temperature2%nx+1, 0:temperature2%ny+1))

   temperature1%devdata = temperature1%data
   temperature2%devdata = temperature2%data

  end subroutine enter_data

  subroutine update_host(temperature1)
      implicit none

      type(field) :: temperature1

      temperature1%data = temperature1%devdata
  end subroutine update_host

end module core_cuda

